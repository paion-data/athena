"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[295],{9820:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=a(4848),s=a(8453);const i={title:"Test",description:"Testing",sidebar_position:14},r=void 0,o={id:"test",title:"Test",description:"Testing",source:"@site/docs/test.md",sourceDirName:".",slug:"/test",permalink:"/athena/docs/test",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/test.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{title:"Test",description:"Testing",sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Key Performance Indicators - Athena Web Service",permalink:"/athena/docs/monitoring-and-operations/kpi"},next:{title:"Development",permalink:"/athena/docs/development/"}},c={},l=[{value:"Groovy Spock",id:"groovy-spock",level:2},{value:"Servlet Testing Documentation",id:"servlet-testing-documentation",level:2},{value:"1. Initialize ApplicationState",id:"1-initialize-applicationstate",level:3},{value:"2. Create Test Harness",id:"2-create-test-harness",level:3},{value:"3. Run Tests",id:"3-run-tests",level:3},{value:"4. Teardown Tests",id:"4-teardown-tests",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Adding Custom Resources to ResourceConfig",id:"adding-custom-resources-to-resourceconfig",level:3}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"groovy-spock",children:"Groovy Spock"}),"\n",(0,n.jsxs)(t.p,{children:["We're ",(0,n.jsx)(t.em,{children:"big"})," believers in testing our code, both for correctness, as well as to ensure that changes don't unintentionally\nbreak existing contracts unintentionally. For example, we rely heavily on the [Spock][Spock]\nframework for our backend service tests, and see a lot of benefit from it's conciseness, built-in\n[mocking framework][mocking framework], and the fact that it uses [Groovy][Groovy]. ","\ud83d\ude04"]}),"\n",(0,n.jsxs)(t.p,{children:["We also strive for very high-quality code, with the belief that quality code is easier to maintain, easier to\nunderstand, and has fewer bugs. To help keep the quality bar high. For instance we have an automated style checker\n([Checkstyle][Checkstyle]) in our Maven-based projects with rules that ",(0,n.jsx)(t.em,{children:"should"})," catch most of the common style issues."]}),"\n",(0,n.jsx)(t.h2,{id:"servlet-testing-documentation",children:"Servlet Testing Documentation"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["The design of athena-core tests, servlet tests in particular, draws extensively from\n",(0,n.jsx)(t.a,{href:"https://github.com/yahoo/fili/blob/master/fili-core/src/test/java/com/yahoo/bard/webservice/application/JerseyTestBinder.java",children:"fili"})]}),"\n",(0,n.jsxs)(t.p,{children:["One noticeable deviation is that since some of Fili's classes have made it possible for themselves to be mutable,\nwhich Athena doesn't do, the stubbing is defined not on these classes, but on\n",(0,n.jsx)(t.a,{href:"../../../../athena-core/src/test/java/com/paiondata/athena/application/ApplicationState.java",children:"ApplicationState"}),", which\nis a modified adaption of Fili ApplicationState"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/paion-data/athena/tree/master/athena-core/src/main/java/com/paiondata/athena/web/endpoints",children:"Servlet-related testing"}),"\nis carried out using\n",(0,n.jsx)(t.a,{href:"https://qubitpi.github.io/jersey/test-framework.html",children:"Jersey Test Framework"}),"."]}),"\n",(0,n.jsx)("img",{src:"../../../assets/img/class-diagram.png",class:"img-fluid",alt:"Error loading class-diagram.png",width:"100%"}),"\n",(0,n.jsxs)(t.p,{children:["Each\n",(0,n.jsx)(t.a,{href:"https://github.com/paion-data/athena/tree/master/athena-core/src/test/groovy/com/paiondata/athena/web/endpoints",children:(0,n.jsx)(t.code,{children:"***ServletSpec.groovy"})}),"\nfollows the following pattern to setup, run, and shutdown tests:"]}),"\n",(0,n.jsx)(t.h3,{id:"1-initialize-applicationstate",children:"1. Initialize ApplicationState"}),"\n",(0,n.jsxs)(t.p,{children:["Test specs initializes test data and mocking through\n",(0,n.jsx)(t.a,{href:"../../../../athena-core/src/test/java/com/paiondata/athena/application/ApplicationState.java",children:"ApplicationState"})," in\n",(0,n.jsx)(t.code,{children:"setup()"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-groovy",children:"def setup() {\n    ApplicationState applicationState = new ApplicationState();\n    applicationState.metadataByFileId = ...\n    applicationState.queryFormatter = ...\n    applicationState.mutationFormatter = ...\n\n    ...\n}\n"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"applicationState.metadataByFileId"})," initializes GraphQL DataFetcher data"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"queryFormatter"})," transforms a (file ID, metadata field list) pair to a native GraphQL query"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"mutationFormatter"})," transforms a (file ID, metadata object) pair to a native GraphQL query that persists a new\nmetadata to database (or just in-memory that usually suffices in testing scenarios)"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"2-create-test-harness",children:"2. Create Test Harness"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-groovy",children:"def setup() {\n    ...\n\n    jerseyTestBinder = new JerseyTestBinder(true, applicationState, ***Servlet.class)\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Executing the statement above will start a ",(0,n.jsx)(t.a,{href:"https://javaee.github.io/grizzly/",children:"Grizzly container"}),". After that all Athena\nendpoints are ready to receive test requests."]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["\ud83d\udccb When writing tests for\n",(0,n.jsx)(t.a,{href:"../../../../athena-core/src/main/java/com/paiondata/athena/web/endpoints/FileServlet.java",children:"FileServlet"}),", make sure\n",(0,n.jsx)(t.code,{children:"MultiPartFeature.class"})," is also passed in as a\nresource class since the file uploading involves a separate Jersey component enabled by it. For example:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"jerseyTestBinder = new BookJerseyTestBinder(true, FileServlet.class, MultiPartFeature.class)\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The first boolean argument (",(0,n.jsx)(t.code,{children:"true"}),") is a flag to indicate whether or not, on executing the statement, servlet container\nstarts immediately. If we would like to defer the startup, change that to ",(0,n.jsx)(t.code,{children:"false"})," and manually start the container later\nby"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-groovy",children:"jerseyTestBinder.start()\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Internally\n",(0,n.jsx)(t.a,{href:"../../../../athena-core/src/test/java/com/paiondata/athena/application/JerseyTestBinder.java",children:"JerseyTestBinder"})," sets\n",(0,n.jsx)(t.a,{href:"../../../../athena-core/src/test/java/com/paiondata/athena/application/TestBinderFactory.java",children:"TestBinderFactory"})," to\nbind those data and behaviors into the actual test"]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["Note that the\n",(0,n.jsx)(t.a,{href:"../../../../athena-core/src/test/java/com/paiondata/athena/application/JerseyTestBinder.java",children:"JerseyTestBinder"}),"\ncreates separate container for each test. Setup method is named ",(0,n.jsx)(t.code,{children:"setup()"})," and teardown method ",(0,n.jsx)(t.code,{children:"cleanup()"})," by Groovy\nSpock convention."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"3-run-tests",children:"3. Run Tests"}),"\n",(0,n.jsxs)(t.p,{children:["To send test request in order to test endpoints, use ",(0,n.jsx)(t.code,{children:"JerseyTestBinder.makeRequest"})," method, which returns a native\njavax rs ws request object:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-groovy",children:'def "File meta data can be accessed through GraphQL GET endpoint"() {\n    when: "we get meta data via GraphQL GET"\n    String actual = jerseyTestBinder.makeRequest(\n            "/metadata/graphql",\n            [query: URLEncoder.encode("""{metaData(fileId:"$FILE_ID"){fileName\\nfileType}}""", "UTF-8")]\n    ).get(String.class)\n\n    then: "the response contains all requested metadata info without error"\n    new JsonSlurper().parseText(actual) == new JsonSlurper().parseText(expectedMultiFieldMetadataResponse())\n}\n'})}),"\n",(0,n.jsx)(t.h3,{id:"4-teardown-tests",children:"4. Teardown Tests"}),"\n",(0,n.jsxs)(t.p,{children:["The teardown shuts down test cnotainer as well as cleaning up all ApplicationStates we defined in\n",(0,n.jsx)(t.a,{href:"#1-initialize-applicationstate",children:"step 1"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-groovy",children:"def cleanup() {\n    // Release the test web container\n    jerseyTestBinder.tearDown()\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,n.jsx)(t.h3,{id:"adding-custom-resources-to-resourceconfig",children:"Adding Custom Resources to ResourceConfig"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"java.lang.IllegalStateException: org.glassfish.jersey.server.model.ModelValidationException: Validation of the\napplication resource model has failed during application initialization.\n[FATAL] No injection source found for a parameter of type public javax.ws.rs.core.Response\n\n...\n\nCaused by: org.glassfish.jersey.server.model.ModelValidationException: Validation of the application resource model has\nfailed during application initialization.\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Athena uses ResourceConfig type for configuration. We need to register the ",(0,n.jsx)(t.code,{children:"MultiPartFeature"}),". Instead of using\n",(0,n.jsx)(t.a,{href:"../../../../athena-core/src/main/java/com/paiondata/athena/application/ResourceConfig.java",children:"Athena ResourceConfig"}),",\nservlet test spec configures with the native\n",(0,n.jsx)(t.a,{href:"https://github.com/eclipse-ee4j/jersey/blob/master/core-server/src/main/java/org/glassfish/jersey/server/ResourceConfig.java",children:"Jersey ResourceConfig"}),".\nThe reason is so that we could bind certain resource classes that we only need in a test spec to enhance test\nefficiency."]}),"\n",(0,n.jsx)(t.p,{children:"Athena ResourceConfig registers MultiPartFeature by default, whereas Jersey ResourceConfig does not. We could register\nthis resource as an extra resource class using"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-groovy",children:"jerseyTestBinder = new JerseyTestBinder(true, applicationState, FileServlet.class, MultiPartFeature.class)\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Note that along with the ",(0,n.jsx)(t.code,{children:"FileServlet"})," resource that's going to be registered and tested, ",(0,n.jsx)(t.code,{children:"MultiPartFeature"})," will also\ngot registered by Jersey ResourceConfig."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>o});var n=a(6540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);