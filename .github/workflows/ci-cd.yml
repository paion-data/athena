# Copyright Jiaqi Liu
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
name: Athena CI/CD

"on":
  pull_request:
  push:
    branches:
      - master

env:
  USER: QubitPi
  EMAIL: jack20220723@gmail.com

jobs:
  yaml-lint:
    name: YAML Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actionshub/yamllint@main
  markdown-lint:
    name: Markdown Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actionshub/markdownlint@main
        with:
          filesToIgnoreRegex: "docs/node_modules\\/.*"

  tests:
    name: Unit & Integration Tests
    needs: [yaml-lint, markdown-lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: QubitPi/hashicorp-aws/.github/actions/jdk-setup@master
      - name: Run unit & integration tests
        run: mvn -B clean verify

  athena-documentation:
    name: Test & Release Documentation (including Javadoc)
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
      - name: Set up JDK
        uses: QubitPi/hashicorp-aws/.github/actions/jdk-setup@master
      - name: Install dependencies and build documentation
        working-directory: docs
        run: |
          bundle install
          bundle exec jekyll build
      - name: Generate Javadoc
        run: mvn -B clean javadoc:aggregate
      - name: Move Javadoc into documentation directory
        if: github.ref == 'refs/heads/master'
        run: mv target/site/apidocs/ docs/pages/apidocs/
      - name: Deploy documentation (including Javadoc) to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs
          enable_jekyll: true
          user_name: ${{ env.USER }}
          user_email: ${{ env.EMAIL }}

  examples-basic-app-docker-image:
    name: Test & Release aristotle-example-basic App Docker Image
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: QubitPi/hashicorp-aws/.github/actions/jdk-setup@master
      - name: Build App WAR file so that Docker can pickup during image build
        run: mvn clean package
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Test image build
        uses: docker/build-push-action@v3
        with:
          context: athena-examples/athena-example-books
          push: false
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/master'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push image to DockerHub
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v3
        with:
          context: athena-examples/athena-example-books
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/athena-example-books:latest

  push-release-tag:
    name: Bump Semantic Version
    if: github.ref == 'refs/heads/master'
    # needs: tests
    uses: QubitPi/hashicorp-aws/.github/workflows/version-bump.yml@master
    with:
      user: QubitPi
      email: jack20220723@gmail.com

  release:
    name: Release athena to Maven Central
    if: github.ref == 'refs/heads/master'
    needs: push-release-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          server-id: ossrh
          settings-path: ${{ github.workspace }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          server-username: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          server-password: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
      - name: Prepare GPG
        run: |
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --reload gpg-agent
      - name: Configure settings.xml for Maven Central release
        uses: whelk-io/maven-settings-xml-action@v20
        with:
          servers: >
            [
              {
                "id": "paion-data",
                "username": "${{ secrets.MAVEN_CENTRAL_USERNAME }}",
                "password": "${{ secrets.MAVEN_CENTRAL_TOKEN }}",
                "passphrase": "${{ secrets.GPG_PASSPHRASE }}"
              }
            ]
          profiles: >
            [
              {
                "id": "paion-data",
                "properties": {
                  "gpg.keyname": "paion-data"
                },
                "activation": {
                  "activeByDefault": "true"
                }
              }
            ]
#      - name: Configure GPG Key
#        run: |
#          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ${{ secrets.GPG_PUB_KEY }}
#
#          git config --global user.signingkey ${{ secrets.GPG_PUB_KEY }}
#
#          mkdir -p ~/.gnupg/
#
#          touch ~/.gnupg/gpg.conf
#          echo "use-agent" >> ~/.gnupg/gpg.conf
#          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
#
#          touch ~/.gnupg/gpg-agent.conf
#          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
#          gpgconf --reload gpg-agent
#
#          printf "${{ secrets.GPG_SIGNING_KEY }}" | base64 --decode > ~/.gnupg/private.key
#          gpg --no-tty --import ~/.gnupg/private.key
      - name: Bump version
        run: |
          git pull
          VERSION=$(git describe)
          echo "INFO Last tag: $VERSION"
          mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false
          mvn versions:update-property -Dproperty=version.athena -DnewVersion=$VERSION -DgenerateBackupPoms=false
      - name: Release
        run: mvn clean deploy -P release -DskipTests
